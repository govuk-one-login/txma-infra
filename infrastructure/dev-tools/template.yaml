AWSTemplateFormatVersion: '2010-09-09'
Description: Developer tool infrastructure
Transform: AWS::Serverless-2016-10-31

Parameters:
  CodeSigningConfigArn:
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Conditions:
  FeatureBranches: !Equals [!Ref Environment, dev]
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Globals:
  Function:
    CodeSigningConfigArn:
      !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    PermissionsBoundary:
      !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    ReservedConcurrentExecutions: 10
    Runtime: nodejs18.x
    Timeout: 30
    MemorySize: 256
    Architectures:
      - 'arm64'

Resources:
  AddFirehoseRecordFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: addFirehoseRecord.handler
      FunctionName: !Sub ${AWS::StackName}-add-firehose-record
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - firehose:PutRecord
              Resource: '*'

  AddFirehoseRecordLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-add-firehose-record
      RetentionInDays: 30

  ReadS3FileToStringFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_116:Lambda will be called by integration test, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: readS3FileToString.handler
      FunctionName: !Sub ${AWS::StackName}-read-s3-file
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject*
                # Adding the ListBucket permission ensures that when a file doesn't exist, we get a 404 instead of a 403
                - s3:ListBucket
              Resource: '*'

  ReadS3FileToStringLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-read-s3-file
      RetentionInDays: 30

  EmptyS3BucketsFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required as failures will be reported to CloudFormation
    #checkov:skip=CKV_AWS_117:VPC not required
    Condition: FeatureBranches
    Type: AWS::Serverless::Function
    Properties:
      Handler: emptyS3Buckets.handler
      FunctionName: !Sub ${AWS::StackName}-empty-s3-buckets
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: CloudFormationListResources
              Effect: Allow
              Action:
                - cloudformation:ListStackResources
              Resource: '*'
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt EmptyS3BucketsLogs.Arn
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:DeleteObject*
                - s3:GetBucketVersioning
                - s3:ListBucket
                - s3:ListBucketVersions
                - s3:PutBucketVersioning
              Resource: '*'

  EmptyS3BucketsLogs:
    Condition: FeatureBranches
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-empty-s3-buckets'
      RetentionInDays: 30

  DynamoOperationsFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: dynamoOperations.handler
      FunctionName: !Sub ${AWS::StackName}-dynamo-operations
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: DecryptKmsKeys
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                - '{{resolve:ssm:DatabaseKmsKeyArn}}'
            - Sid: QueryRequestTableReadWrite
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:DeleteItem
              Resource: '*'

  DynamoOperationsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-dynamo-operations'
      RetentionInDays: 30

  SqsOperationsFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: sqsOperations.handler
      FunctionName: !Sub ${AWS::StackName}-sqs-operations
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: DecryptKmsKeys
              Effect: Allow
              Action:
                - kms:GenerateDataKey
                - kms:Decrypt
              Resource: '*'
            - Sid: SqsWrite
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: '*'

  SqsOperationsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-sqs-operations'
      RetentionInDays: 30

  IntegrationTestDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-${Environment}-test-data-bucket
      LoggingConfiguration:
        DestinationBucketName: '{{resolve:ssm:S3LogsBucketName}}'
        LogFilePrefix: !Sub ${AWS::StackName}-${Environment}-test-data-bucket/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AddFirehoseRecordFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/AddFirehoseRecordFunctionName
      Type: String
      Value: !Ref AddFirehoseRecordFunction

  EmptyS3BucketsFunctionArnParameter:
    Condition: FeatureBranches
    Type: AWS::SSM::Parameter
    Properties:
      Name: EmptyS3BucketsFunctionArn
      Type: String
      Value: !GetAtt EmptyS3BucketsFunction.Arn

  IntegrationTestDataBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/IntegrationTestDataBucketName
      Type: String
      Value: !Ref IntegrationTestDataBucket

  IntegrationTestDataBucketArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/IntegrationTestDataBucketArn
      Type: String
      Value: !GetAtt IntegrationTestDataBucket.Arn

  DynamoOperationsFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/DynamoOperationsFunctionName
      Type: String
      Value: !Ref DynamoOperationsFunction

  SqsOperationsFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/SqsOperationsFunctionName
      Type: String
      Value: !Ref SqsOperationsFunction

  ReadS3FileToStringFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/ReadS3FileToStringFunctionName
      Type: String
      Value: !Ref ReadS3FileToStringFunction
