AWSTemplateFormatVersion: '2010-09-09'
Description: Developer tool infrastructure
Transform: AWS::Serverless-2016-10-31

Parameters:
  CodeSigningConfigArn:
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none
  Environment:
    Description: The environment type.
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Conditions:
  FeatureBranches: !Equals [!Ref Environment, dev]
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables

Globals:
  Function:
    CodeSigningConfigArn:
      !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    CodeUri: dist/
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}'
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn
              ]
        DT_CONNECTION_BASE_URL: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}'
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn
              ]
        DT_CLUSTER_ID: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}'
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn
              ]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}'
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn
              ]
        DT_TENANT: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}'
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn
              ]
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: 'true'
    PermissionsBoundary:
      !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    ReservedConcurrentExecutions: 10
    Runtime: nodejs22.x
    Timeout: 30
    MemorySize: 256
    Architectures:
      - 'arm64'
    Layers:
      - !Sub
        - '{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}'
        - SecretArn:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              dynatraceSecretArn
            ]

Resources:
  AddFirehoseRecordFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: addFirehoseRecord.handler
      FunctionName: !Sub ${AWS::StackName}-add-firehose-record
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - firehose:PutRecord
              Resource: '*'

  AddFirehoseRecordLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-add-firehose-record
      RetentionInDays: 30

  ReadS3FileToStringFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals section
    #checkov:skip=CKV_AWS_116:Lambda will be called by integration test, so repeated processing of the same message isn't a problem
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: readS3FileToString.handler
      FunctionName: !Sub ${AWS::StackName}-read-s3-file
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject*
                # Adding the ListBucket permission ensures that when a file doesn't exist, we get a 404 instead of a 403
                - s3:ListBucket
              Resource: '*'

  ReadS3FileToStringLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-read-s3-file
      RetentionInDays: 30

  EmptyS3BucketsFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required as failures will be reported to CloudFormation
    #checkov:skip=CKV_AWS_117:VPC not required
    Condition: FeatureBranches
    Type: AWS::Serverless::Function
    Properties:
      Handler: emptyS3Buckets.handler
      FunctionName: !Sub ${AWS::StackName}-empty-s3-buckets
      Description: 'Used by feature branches so empty s3 buckets so a feature stack can be deleted'
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: CloudFormationListResources
              Effect: Allow
              Action:
                - cloudformation:ListStackResources
              Resource: '*'
            - Sid: Logs
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt EmptyS3BucketsLogs.Arn
            - Sid: S3Permissions
              Effect: Allow
              Action:
                - s3:DeleteObject*
                - s3:GetBucketVersioning
                - s3:ListBucket
                - s3:ListBucketVersions
                - s3:PutBucketVersioning
              Resource: '*'

  EmptyS3BucketsLogs:
    Condition: FeatureBranches
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-empty-s3-buckets'
      RetentionInDays: 30

  DynamoOperationsFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: dynamoOperations.handler
      FunctionName: !Sub ${AWS::StackName}-dynamo-operations
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: DecryptKmsKeys
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                - '{{resolve:ssm:DatabaseKmsKeyArn}}'
            - Sid: QueryRequestTableReadWrite
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:DeleteItem
              Resource: '*'

  DynamoOperationsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-dynamo-operations'
      RetentionInDays: 30

  SqsOperationsFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: sqsOperations.handler
      FunctionName: !Sub ${AWS::StackName}-sqs-operations
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      Policies:
        - Statement:
            - Sid: DecryptKmsKeys
              Effect: Allow
              Action:
                - kms:GenerateDataKey
                - kms:Decrypt
              Resource: '*'
            - Sid: SqsWrite
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: '*'

  SqsOperationsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-sqs-operations'
      RetentionInDays: 30

  ##############################
  # CopyS3FileFunction START   #
  ##############################

  CopyS3FileFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: copyS3File.handler
      FunctionName: !Sub ${AWS::StackName}-copy-s3-file
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      MemorySize: 512
      Role: !GetAtt CopyS3FileRole.Arn

  CopyS3FileRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-copy-s3-file-role'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref CopyS3FilePolicy

  CopyS3FilePolicy:
    #checkov:skip=CKV_AWS_111 this test Lambda is used across the account, so we can't specify
    # which buckets it will specifically be used with upfront.
    # The code is not deployed to production
    #checkov:skip=CKV_AWS_108 We need to be able to copy from one bucket to another
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-copy-s3-file-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowS3Copy
            Effect: 'Allow'
            Action:
              - s3:GetObject*
              - s3:PutObject
              - s3:PutObjectTagging
            Resource: '*'

  CopyS3FileLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-copy-s3-file'
      RetentionInDays: 30

  ############################
  # CopyS3FileFunction END   #
  ############################

  ##############################
  # S3OperationsFunction START   #
  ##############################

  S3OperationsFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: S3Operations.handler
      FunctionName: !Sub ${AWS::StackName}-s3-operations
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      MemorySize: 512
      Role: !GetAtt S3OperationsRole.Arn

  S3OperationsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-s3-operations-role'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref S3OperationsPolicy

  S3OperationsPolicy:
    #checkov:skip=CKV_AWS_111 this test Lambda is used across the account, so we can't specify
    # which buckets it will specifically be used with upfront.
    # The code is not deployed to production
    #checkov:skip=CKV_AWS_108 We need to be able to copy from one bucket to another
    #checkov:skip=CKV_AWS_109 This is a generic S3 Function and requires broad permissions
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-s3-operations-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowS3Operations
            Effect: 'Allow'
            Action:
              - s3:GetObject*
              - s3:ListBucket
              - s3:PutObject*
              - s3:DeleteObject*
            Resource: '*'

  S3OperationsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-s3-operations'
      RetentionInDays: 30

  ############################
  # S3OperationsFunction END   #
  ############################

  #######################################
  # PutZippedStringToS3Function START   #
  #######################################

  PutZippedStringToS3Function:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: writeZippedStringToS3.handler
      FunctionName: !Sub ${AWS::StackName}-write-zipped-string
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      MemorySize: 512
      Role: !GetAtt WriteZippedStringRole.Arn

  WriteZippedStringRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-write-zipped-string-role'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref WriteZippedStringRolePolicy

  WriteZippedStringRolePolicy:
    #checkov:skip=CKV_AWS_111 this test Lambda is used across the account, so we can't specify
    # which buckets it will specifically be used with upfront.
    # The code is not deployed to production
    #checkov:skip=CKV_AWS_108 We need to be able to copy from one bucket to another
    #checkov:skip=CKV_AWS_109 This is a generic S3 Function and requires broad permissions
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-write-zipped-string-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowS3Operations
            Effect: 'Allow'
            Action:
              - s3:GetObject*
              - s3:ListBucket
              - s3:PutObject*
              - s3:DeleteObject*
            Resource: '*'

  WriteZippedStringFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-write-zipped-string'
      RetentionInDays: 30

  ############################
  # PutZippedStringToS3Function END   #
  ############################

  ###################################
  # CheckS3FileExistsFunction START #
  ###################################

  CheckS3FileExistsFunction:
    #checkov:skip=CKV_AWS_115:Defined in Globals
    #checkov:skip=CKV_AWS_116:DLQ not required
    #checkov:skip=CKV_AWS_117:VPC not required
    Type: AWS::Serverless::Function
    Properties:
      Handler: checkS3FileExists.handler
      FunctionName: !Sub ${AWS::StackName}-check-s3-file-exists
      KmsKeyArn: '{{resolve:ssm:LambdaKmsKeyArn}}'
      MemorySize: 512
      Role: !GetAtt CheckS3FileExistsRole.Arn

  CheckS3FileExistsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-check-s3-file-exists-role'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToAssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref CheckS3FileExistsPolicy

  CheckS3FileExistsPolicy:
    #checkov:skip=CKV_AWS_108: this function is only used in test environments, where
    # we need to be able to check if files exists or not
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-check-s3-file-exists-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowS3Read
            Effect: 'Allow'
            Action:
              - s3:GetObject*
              # Adding the ListBucket permission ensures that when a file doesn't exist, we get a 404 instead of a 403
              - s3:ListBucket
            Resource: '*'

  CheckS3FileExistsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-check-s3-file-exists'
      RetentionInDays: 30

  ###################################
  # CheckS3FileExistsFunction END   #
  ###################################

  IntegrationTestDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-${Environment}-test-data-bucket
      LoggingConfiguration:
        DestinationBucketName: '{{resolve:ssm:S3LogsBucketName}}'
        LogFilePrefix: !Sub ${AWS::StackName}-${Environment}-test-data-bucket/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AddFirehoseRecordFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/AddFirehoseRecordFunctionName
      Type: String
      Value: !Ref AddFirehoseRecordFunction

  EmptyS3BucketsFunctionArnParameter:
    Condition: FeatureBranches
    Type: AWS::SSM::Parameter
    Properties:
      Name: EmptyS3BucketsFunctionArn
      Type: String
      Value: !GetAtt EmptyS3BucketsFunction.Arn

  IntegrationTestDataBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/IntegrationTestDataBucketName
      Type: String
      Value: !Ref IntegrationTestDataBucket

  IntegrationTestDataBucketArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/IntegrationTestDataBucketArn
      Type: String
      Value: !GetAtt IntegrationTestDataBucket.Arn

  DynamoOperationsFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/DynamoOperationsFunctionName
      Type: String
      Value: !Ref DynamoOperationsFunction

  SqsOperationsFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/SqsOperationsFunctionName
      Type: String
      Value: !Ref SqsOperationsFunction

  ReadS3FileToStringFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/ReadS3FileToStringFunctionName
      Type: String
      Value: !Ref ReadS3FileToStringFunction

  CopyS3FileFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/CopyS3FileFunctionName
      Type: String
      Value: !Ref CopyS3FileFunction

  CheckS3FileExistsFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/CheckS3FileExistsFunctionName
      Type: String
      Value: !Ref CheckS3FileExistsFunction

  S3OperationsFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/S3OperationsFunctionName
      Type: String
      Value: !Ref S3OperationsFunction

  PutZippedStringToS3FunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tests/PutZippedStringToS3FunctionName
      Type: String
      Value: !Ref PutZippedStringToS3Function
