AWSTemplateFormatVersion: '2010-09-09'
Description: Static infrastructure for TICF Zendesk integration
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production

Conditions:
  CslsEgress:
    !Or [
      !Equals [!Ref Environment, production],
      !Equals [!Ref Environment, integration],
      !Equals [!Ref Environment, staging]
    ]
  LockCrossAccountPermissionsToLambdaRoles:
    !Not [!Equals [!Ref Environment, dev]]
  IsProduction: !Equals [!Ref Environment, 'production']
  NotTestEnvironment:
    !Or [
      !Equals [!Ref Environment, production],
      !Equals [!Ref Environment, integration]
    ]

Resources:
  #####################
  # Batch Job Resources
  #####################

  BatchJobManifestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-${Environment}-batch-job-manifest-bucket
      LifecycleConfiguration:
        Rules:
          - Id: BatchJobManifestCleanupRule
            Status: Enabled
            ExpirationInDays: 5
      LoggingConfiguration:
        DestinationBucketName: '{{resolve:ssm:S3LogsBucketName}}'
        LogFilePrefix: !Sub ${AWS::StackName}-${Environment}-batch-job-manifest-bucket/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  ######################################
  # TICF Queries Email Recipients Bucket
  ######################################

  ValidEmailRecipientsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-${Environment}-email-recipients
      LoggingConfiguration:
        DestinationBucketName: '{{resolve:ssm:S3LogsBucketName}}'
        LogFilePrefix: !Sub ${AWS::StackName}-${Environment}-email-recipients/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  ################################
  # Data Analysis Athena Resources
  ################################

  AuditDataAnalysisGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: TxMA - Event Message Analysis Database
        Name: txma_audit_analysis

  ManualAuditDataQueriesWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Description: Workgroup for manual queries on TxMA audit data
      Name: manual-audit-data-queries
      RecursiveDeleteOption: true
      WorkGroupConfiguration:
        EngineVersion:
          SelectedEngineVersion: 'Athena engine version 3'
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: false
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_S3
          OutputLocation: !Sub s3://${AthenaQueryOutputBucket}/manual-audit-data-queries/

  TicfAutomatedDataQueriesWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Description: Workgroup for automated queries on TxMA audit data by TICF/Zendesk integration
      Name: ticf-automated-audit-data-queries
      RecursiveDeleteOption: true
      WorkGroupConfiguration:
        EngineVersion:
          SelectedEngineVersion: 'Athena engine version 3'
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: false
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_S3
          OutputLocation: !Sub s3://${AthenaQueryOutputBucket}/ticf-automated-audit-data-queries/

  AthenaQueryOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt AthenaQueryOutputBucketKmsKey.Arn
      BucketName: !Sub ${AWS::StackName}-${Environment}-athena-query-output-bucket
      LifecycleConfiguration:
        Rules:
          - Id: AnalysisCleanupRule
            Status: Enabled
            ExpirationInDays: 7
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
      LoggingConfiguration:
        DestinationBucketName: '{{resolve:ssm:S3LogsBucketName}}'
        LogFilePrefix: !Sub ${AWS::StackName}-${Environment}-athena-query-output-bucket/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AthenaQueryOutputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AthenaQueryOutputBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: 'AllowSSLRequestsOnly'
            Effect: Deny
            Action: s3:*
            Resource:
              - !Sub '${AthenaQueryOutputBucket.Arn}/*'
            Principal: '*'
            Condition:
              Bool:
                aws:SecureTransport: 'false'
          - Sid: AllowQueryResultsAccountAccess
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectTagging
            Effect: Allow
            Resource: !Sub ${AthenaQueryOutputBucket.Arn}/*
            Principal:
              AWS: '{{resolve:ssm:QueryResultsAccountRootArn}}'

  AthenaQueryOutputBucketKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow Results account access
            Effect: Allow
            Principal:
              AWS: '{{resolve:ssm:QueryResultsAccountRootArn}}'
            Action:
              - kms:Decrypt
            Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  AthenaQueryOutputBucketKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/athena-query-output-bucket-kms-key
      TargetKeyId: !Ref AthenaQueryOutputBucketKmsKey

  ####################
  # DynamoDB Resources
  ####################

  QueryRequestTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub ${AWS::StackName}-query-request-table
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: !If [NotTestEnvironment, false, true]
      AttributeDefinitions:
        - AttributeName: zendeskId
          AttributeType: S
        - AttributeName: athenaQueryId
          AttributeType: S
      KeySchema:
        - AttributeName: zendeskId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: athenaQueryIdIndex
          KeySchema:
            - AttributeName: athenaQueryId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: '{{resolve:ssm:DatabaseKmsKeyArn}}'
      Tags:
        - Key: BackupFrequency
          Value: Bihourly
      DeletionProtectionEnabled: true

  ###############
  # WAF Resources
  ###############

  ZendeskWebhookApiWafAcl:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Name: ZendeskWebhookApiWafAcl
      Scope: REGIONAL
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: ZendeskWebhookApiWafMetric
        SampledRequestsEnabled: true
      Rules:
        - Name: AwsManagedRulesCommonRuleSet
          Priority: 0
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules: []
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: ZendeskWebhookApiWafCommonRuleSetMetric
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 1
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: ZendeskWebhookApiWafKnownBadInputsRuleSetMetric
            SampledRequestsEnabled: true
        - Name: AWSManagedRulesAmazonIpReputationList
          Priority: 2
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: ZendeskWebhookApiWafIpReputationListMetric
            SampledRequestsEnabled: true

  ZendeskWebhookApiWafLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: '{{resolve:ssm:LogsKmsKeyArn}}'
      LogGroupName: aws-waf-logs-ZendeskWebhookApiWafAcl
      RetentionInDays: 30

  ZendeskWebhookApiWafCslsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: CslsEgress
    Properties:
      LogGroupName: !Ref ZendeskWebhookApiWafLogs
      FilterPattern: ''
      DestinationArn: '{{resolve:ssm:CSLSLogsDestination}}'

  ZendeskWebhookApiWafLoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      LogDestinationConfigs:
        # Cannot use Fn::GetAtt here since the ARN of a log group includes ':*' at the end, which is not accepted by the WAF service.
        # The ARN must not include the ':*'.
        - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ZendeskWebhookApiWafLogs}
      ResourceArn: !GetAtt ZendeskWebhookApiWafAcl.Arn

  ###################################
  # TICF Automated Queries SQS Queues
  ###################################

  # Need a separate KMS key here for the audit queue because we need to grant access to the event processing account
  # and our main KMS key definitions are in 'core', which is a shared set of definitions across all stacks.
  AuditDataRequestEventsQueueKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Enable Decrypt access for Event Processing
            Effect: Allow
            Principal:
              AWS: '{{resolve:ssm:EventProcessingAccountRootArn}}'
            Action:
              - kms:Decrypt
            Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Encrypt
              - kms:Decrypt
            Resource: '*'

  AuditDataRequestEventsQueueKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/data-request-events-queue-kms-key
      TargetKeyId: !Ref AuditDataRequestEventsQueueKmsKey

  AuditDataRequestEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      # We've been asked to use a message retention period of 14 days in production to allow ample time for integration
      # Elswhere, to save wasted queue entries, we use two hours
      MessageRetentionPeriod: !If [IsProduction, 1209600, 7200]
      QueueName: !Sub ${AWS::StackName}-${Environment}-audit-data-request-events-queue
      KmsMasterKeyId: !GetAtt AuditDataRequestEventsQueueKmsKey.Arn
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AuditDataRequestEventsDeadLetterQueue.Arn
        maxReceiveCount: 5

  AuditDataRequestQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref AuditDataRequestEventsQueue
      PolicyDocument:
        Statement:
          - Sid: AllowEventProcessingAccountQueueRead
            Action:
              - 'sqs:ChangeMessageVisibility'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueAttributes'
              - 'sqs:ReceiveMessage'
            Effect: 'Allow'
            Resource: !GetAtt AuditDataRequestEventsQueue.Arn
            Principal:
              AWS:
                - '{{resolve:ssm:EventProcessingAccountRootArn}}'

  AuditDataRequestEventsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-${Environment}-audit-data-request-events-dlq
      KmsMasterKeyId: !GetAtt AuditDataRequestEventsQueueKmsKey.Arn

  # Need a separate KMS key here for the query completed queue because we need to grant access to the query-results account
  # and our main KMS key definitions are in 'core', which is a shared set of definitions across all stacks.
  QueryCompletedQueueKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - !If
            - LockCrossAccountPermissionsToLambdaRoles
            # If we are in a non-dev environment so know the lambda role name
            - Sid: Enable Decrypt access for Query Results account generate download Lambda
              Effect: Allow
              Principal:
                AWS: '{{resolve:ssm:QueryResultsAccountRootArn}}'
              Action:
                - kms:Decrypt
              Resource: '*'
              Condition:
                StringEquals:
                  'aws:principalArn': !Sub 'arn:aws:iam::{{resolve:ssm:QueryResultsAccountNumber}}:role/txma-query-results-${Environment}-generate-download-role'
            # Otherwise allow anything in the dev query results account root account
            - Sid: Enable Decrypt access for Query Results dev account
              Effect: Allow
              Principal:
                AWS: '{{resolve:ssm:QueryResultsAccountRootArn}}'
              Action:
                - kms:Decrypt
              Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Encrypt
              - kms:Decrypt
            Resource: '*'

  QueryCompletedQueueKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/query-completed-queue-kms-key
      TargetKeyId: !Ref QueryCompletedQueueKmsKey

  QueryCompletedQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-${Environment}-query-completed-queue
      KmsMasterKeyId: !GetAtt QueryCompletedQueueKmsKey.Arn
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QueryCompletedDeadLetterQueue.Arn
        maxReceiveCount: 5

  QueryCompletedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref QueryCompletedQueue
      PolicyDocument:
        Statement:
          - !If
            - LockCrossAccountPermissionsToLambdaRoles
            # If we are in a non-dev environment so know the lambda role name
            - Sid: AllowResultsDeliveryQueueReadForLambdaRole
              Action:
                - 'sqs:ChangeMessageVisibility'
                - 'sqs:DeleteMessage'
                - 'sqs:GetQueueAttributes'
                - 'sqs:ReceiveMessage'
              Effect: 'Allow'
              Resource: !GetAtt QueryCompletedQueue.Arn
              Principal:
                AWS: '{{resolve:ssm:QueryResultsAccountRootArn}}'
              Condition:
                StringEquals:
                  'aws:principalArn': !Sub 'arn:aws:iam::{{resolve:ssm:QueryResultsAccountNumber}}:role/txma-query-results-${Environment}-generate-download-role'
            # Otherwise allow anything in the dev query results account root account
            - Sid: AllowResultsDeliveryQueueReadForResultsAccount
              Action:
                - 'sqs:ChangeMessageVisibility'
                - 'sqs:DeleteMessage'
                - 'sqs:GetQueueAttributes'
                - 'sqs:ReceiveMessage'
              Effect: 'Allow'
              Resource: !GetAtt QueryCompletedQueue.Arn
              Principal:
                AWS: '{{resolve:ssm:QueryResultsAccountRootArn}}'

  QueryCompletedDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-${Environment}-query-completed-dlq
      KmsMasterKeyId: !GetAtt QueryCompletedQueueKmsKey.Arn

  ################
  # Email to Slack
  ################

  SlackNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-slack-notifications-topic'
      KmsMasterKeyId: '{{resolve:ssm:CoreSnsKmsKeyArn}}'

  SlackNotificationsSubscriptionGeneric:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: '{{resolve:ssm:EmailToSlackAddress}}'
      Protocol: 'email'
      TopicArn: !GetAtt SlackNotificationsTopic.TopicArn

  EmailToSlackSNSTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: EmailToSlackSNSTopicArn
      Type: String
      Value: !GetAtt SlackNotificationsTopic.TopicArn

  ################
  # SSM Parameters
  ################

  AthenaQueryOutputBucketArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AthenaQueryOutputBucketArn
      Type: String
      Value: !GetAtt AthenaQueryOutputBucket.Arn

  AthenaQueryOutputBucketKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AthenaQueryOutputBucketKmsKeyArn
      Type: String
      Value: !GetAtt AthenaQueryOutputBucketKmsKey.Arn

  AthenaQueryOutputBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AthenaQueryOutputBucketName
      Type: String
      Value: !Ref AthenaQueryOutputBucket

  AuditDataAnalysisGlueDatabaseArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AuditDataAnalysisGlueDatabaseArn
      Type: String
      Value: !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${AuditDataAnalysisGlueDatabase}

  AuditDataAnalysisGlueDatabaseNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AuditDataAnalysisGlueDatabaseName
      Type: String
      Value: !Ref AuditDataAnalysisGlueDatabase

  AuditDataRequestEventsQueueArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AuditDataRequestEventsQueueArn
      Type: String
      Value: !GetAtt AuditDataRequestEventsQueue.Arn

  AuditDataRequestEventsQueueKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AuditDataRequestEventsQueueKmsKeyArn
      Type: String
      Value: !GetAtt AuditDataRequestEventsQueueKmsKey.Arn

  AuditDataRequestEventsQueueUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AuditDataRequestEventsQueueUrl
      Type: String
      Value: !Ref AuditDataRequestEventsQueue

  BatchJobManifestBucketArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: BatchJobManifestBucketArn
      Type: String
      Value: !GetAtt BatchJobManifestBucket.Arn

  BatchJobManifestBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: BatchJobManifestBucketName
      Type: String
      Value: !Ref BatchJobManifestBucket

  ManualAuditDataQueriesWorkgroupArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ManualAuditDataQueriesWorkgroupArn
      Type: String
      Value: !Sub arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${ManualAuditDataQueriesWorkgroup}

  ManualAuditDataQueriesWorkgroupNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ManualAuditDataQueriesWorkgroupName
      Type: String
      Value: !Ref ManualAuditDataQueriesWorkgroup

  QueryCompletedQueueArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: QueryCompletedQueueArn
      Type: String
      Value: !GetAtt QueryCompletedQueue.Arn

  QueryCompletedQueueKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: QueryCompletedQueueKmsKeyArn
      Type: String
      Value: !GetAtt QueryCompletedQueueKmsKey.Arn

  QueryCompletedQueueUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: QueryCompletedQueueUrl
      Type: String
      Value: !Ref QueryCompletedQueue

  QueryRequestTableArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: QueryRequestTableArn
      Type: String
      Value: !GetAtt QueryRequestTable.Arn

  QueryRequestTableNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: QueryRequestTableName
      Type: String
      Value: !Ref QueryRequestTable

  TicfAutomatedDataQueriesWorkgroupArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: TicfAutomatedDataQueriesWorkgroupArn
      Type: String
      Value: !Sub arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${TicfAutomatedDataQueriesWorkgroup}

  TicfAutomatedDataQueriesWorkgroupNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: TicfAutomatedDataQueriesWorkgroupName
      Type: String
      Value: !Ref TicfAutomatedDataQueriesWorkgroup

  ValidEmailRecipientsBucketArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ValidEmailRecipientsBucketArn
      Type: String
      Value: !GetAtt ValidEmailRecipientsBucket.Arn

  ValidEmailRecipientsBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ValidEmailRecipientsBucketName
      Type: String
      Value: !Ref ValidEmailRecipientsBucket

  ZendeskWebhookApiWafAclArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ZendeskWebhookApiWafAclArn
      Type: String
      Value: !GetAtt ZendeskWebhookApiWafAcl.Arn
