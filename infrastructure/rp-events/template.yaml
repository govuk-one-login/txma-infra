AWSTemplateFormatVersion: '2010-09-09'
Description: Static infrastructure for Relying Party Event Processing
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Conditions:
  LockCrossAccountPermissionsToLambdaRoles:
    !Not [!Equals [!Ref Environment, dev]]
  IsIntegratedEnvironment: !And
    - !Not [!Equals [!Ref Environment, dev]]
    - !Not [!Equals [!Ref Environment, build]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Resources:
  ####################
  # DynamoDB Resources
  ####################

  RelyingPartyConfigTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub ${AWS::StackName}-${Environment}-rp-config-table
      AttributeDefinitions:
        - AttributeName: securityEventName
          AttributeType: S
      KeySchema:
        - AttributeName: securityEventName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: '{{resolve:ssm:DatabaseKmsKeyArn}}'

  RelyingPartyPairwiseMappingTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub ${AWS::StackName}-${Environment}-rp-pairwise-mapping-table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: commonSubjectId
          AttributeType: S
        - AttributeName: clientId
          AttributeType: S
        - AttributeName: clientPairwiseIdLookup
          AttributeType: S
      KeySchema:
        - AttributeName: commonSubjectId
          KeyType: HASH
        - AttributeName: clientId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ClientPairwiseIdIndex
          KeySchema:
            - AttributeName: clientPairwiseIdLookup
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: '{{resolve:ssm:DatabaseKmsKeyArn}}'

  RelyingPartyPairwiseMappingTableCrossAccountAccessRole:
    Type: AWS::IAM::Role
    Condition: IsIntegratedEnvironment
    Properties:
      RoleName: !Sub '${AWS::StackName}-pairwise-table-access-role'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowAssumeRoleAccessToFPAD
            Effect: Allow
            Principal:
              AWS: '{{resolve:ssm:FpadAwsAccountRootArn}}'
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref RelyingPartyPairwiseMappingTableCrossAccountAccessPolicy

  RelyingPartyPairwiseMappingTableCrossAccountAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IsIntegratedEnvironment
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-pairwise-table-access-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DynamoPairwiseTableRead
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
            Resource:
              - !GetAtt RelyingPartyPairwiseMappingTable.Arn
          - Sid: DynamoItemsDecrypt
            Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - '{{resolve:ssm:DatabaseKmsKeyArn}}'

  ################
  # SQS Resources
  ################

  # Need a separate KMS key here for the RP events queue because we need to grant access to the shared signals account
  # and our main KMS key definitions are shared across all stacks.
  RPEventsQueueKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - !If
            - LockCrossAccountPermissionsToLambdaRoles
            # If we are in a non-dev environment so know the lambda role name
            - Sid: Enable Decrypt access for Shared Signals account generate set Lambda
              Effect: Allow
              Principal:
                AWS: '{{resolve:ssm:SharedSignalsAccountRootArn}}'
              Action:
                - kms:Decrypt
              Resource: '*'
              Condition:
                StringEquals:
                  'aws:principalArn': !Sub 'arn:aws:iam::{{resolve:ssm:SharedSignalsAccountNumber}}:role/shared-signals-create-sets-function-role'
            # Otherwise allow anything in the dev query results account root account
            - Sid: Enable Decrypt access for Shared Signals dev account
              Effect: Allow
              Principal:
                AWS: '{{resolve:ssm:SharedSignalsAccountRootArn}}'
              Action:
                - kms:Decrypt
              Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Encrypt
              - kms:Decrypt
            Resource: '*'

  RPEventsQueueKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/rp-events-queue-kms-key
      TargetKeyId: !Ref RPEventsQueueKmsKey

  RPEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-${Environment}-rp-events-queue
      KmsMasterKeyId: !GetAtt RPEventsQueueKmsKey.Arn
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt RPEventsDeadLetterQueue.Arn
        maxReceiveCount: 5

  RPEventsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref RPEventsQueue
      PolicyDocument:
        Statement:
          - !If
            - LockCrossAccountPermissionsToLambdaRoles
            # If we are in a non-dev environment so know the lambda role name
            - Sid: AllowRPEventsQueueReadForLambdaRole
              Action:
                - 'sqs:ChangeMessageVisibility'
                - 'sqs:DeleteMessage'
                - 'sqs:GetQueueAttributes'
                - 'sqs:ReceiveMessage'
              Effect: 'Allow'
              Resource: !GetAtt RPEventsQueue.Arn
              Principal:
                AWS: '{{resolve:ssm:SharedSignalsAccountRootArn}}'
              Condition:
                StringEquals:
                  'aws:principalArn': !Sub 'arn:aws:iam::{{resolve:ssm:SharedSignalsAccountNumber}}:role/shared-signals-create-sets-function-role'
            # Otherwise allow anything in the dev query results account root account
            - Sid: AllowRPEventsQueueReadForSharedSignalsAccount
              Action:
                - 'sqs:ChangeMessageVisibility'
                - 'sqs:DeleteMessage'
                - 'sqs:GetQueueAttributes'
                - 'sqs:ReceiveMessage'
              Effect: 'Allow'
              Resource: !GetAtt RPEventsQueue.Arn
              Principal:
                AWS: '{{resolve:ssm:SharedSignalsAccountRootArn}}'

  RPEventsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-${Environment}-rp-events-dead-letter-queue
      KmsMasterKeyId: !GetAtt RPEventsQueueKmsKey.Arn

  ################
  # SSM Parameters
  ################

  RelyingPartyConfigTableArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RelyingPartyConfigTableArn
      Type: String
      Value: !GetAtt RelyingPartyConfigTable.Arn

  RelyingPartyConfigTableNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RelyingPartyConfigTableName
      Type: String
      Value: !Ref RelyingPartyConfigTable

  RelyingPartyPairwiseMappingTableArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RelyingPartyPairwiseMappingTableArn
      Type: String
      Value: !GetAtt RelyingPartyPairwiseMappingTable.Arn

  RelyingPartyPairwiseMappingTableNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RelyingPartyPairwiseMappingTableName
      Type: String
      Value: !Ref RelyingPartyPairwiseMappingTable

  RPEventsQueueArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RPEventsQueueArn
      Type: String
      Value: !GetAtt RPEventsQueue.Arn

  RPEventsQueueKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RPEventsQueueKmsKeyArn
      Type: String
      Value: !GetAtt RPEventsQueueKmsKey.Arn

  RPEventsQueueUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RPEventsQueueUrl
      Type: String
      Value: !Ref RPEventsQueue
