AWSTemplateFormatVersion: '2010-09-09'
Description: Core infrastructure that should not change often
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Conditions:
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Resources:
  #################################
  # Start: Slack Alerts resources #
  #################################

  ChatbotAlarmRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${Environment}-chatbot-alarm-role
      PermissionsBoundary:
        !If [
          UsePermissionsBoundary,
          !Ref PermissionsBoundary,
          !Ref AWS::NoValue
        ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'chatbot.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  SNSCriticalAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !GetAtt SnsKmsKey.Arn
      TopicName: !Sub ${AWS::StackName}-${Environment}-critical-alarm-topic

  SNSCriticalAlarmTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: 'sns:Publish'
            Resource: !GetAtt SNSCriticalAlarmTopic.TopicArn
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
      Topics:
        - !Ref SNSCriticalAlarmTopic

  ###############################
  # End: Slack Alerts resources #
  ###############################

  ###################
  # Start: KMS Keys #
  ###################

  DatabaseKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  DatabaseKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/database-kms-key
      TargetKeyId: !Ref DatabaseKmsKey

  FirehoseKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'

  FirehoseKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}/${Environment}/firehose-kms-key'
      TargetKeyId: !Ref FirehoseKmsKey

  LambdaKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow Lambda to decrypt environment variables
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  LambdaKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/lambda-kms-key
      TargetKeyId: !Ref LambdaKmsKey

  LogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow CloudWatch Logs to use key
            Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Decrypt*
              - kms:Describe*
              - kms:Encrypt*
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: '*'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  LogsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/logs-kms-key
      TargetKeyId: !Ref LogsKmsKey

  SecretsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  SecretsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/secrets-kms-key
      TargetKeyId: !Ref SecretsKmsKey

  SnsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow access for Key User (SNS Service Principal)
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'
          - Sid: Allow access for CloudWatch
            Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'
          - Sid: Allow access for lambda
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'

  SnsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/sns-kms-key
      TargetKeyId: !Ref SnsKmsKey

  SqsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Encrypt
              - kms:Decrypt
            Resource: '*'

  SqsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/queue-kms-key
      TargetKeyId: !Ref SqsKmsKey

  CslsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Encrypt
              - kms:Decrypt
            Resource: '*'
          - Sid: CSLS Access
            Effect: Allow
            Principal:
              AWS: '{{resolve:ssm:CSLSS3LambdaARN}}'
            Action:
              - kms:Decrypt*
            Resource: '*'

  CslsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/csls-kms-key
      TargetKeyId: !Ref CslsKmsKey

  #################
  # End: KMS Keys #
  #################

  ############################
  # Start: S3 Logs resources #
  ############################

  S3LogsBucket:
    #checkov:skip=CKV_AWS_18:This is the logs bucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName:
        !Join [
          '-',
          [
            !Ref AWS::StackName,
            !Ref Environment,
            s3-logs,
            !Select [
              4,
              !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]
            ]
          ]
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: ExpireLogsRule
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpiration:
              NoncurrentDays: 7
      NotificationConfiguration:
        QueueConfigurations:
          - Event: 's3:ObjectCreated:*'
            Queue: !GetAtt S3CslsQueue.Arn
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  S3LogsBucketAllowLoggingPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3LogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLogging
            Effect: Allow
            Resource:
              - !Sub ${S3LogsBucket.Arn}/*
            Principal:
              Service: logging.s3.amazonaws.com
            Action:
              - s3:PutObject
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              Bool:
                aws:SecureTransport: true
          - Sid: S3LogShipping
            Effect: Allow
            Resource:
              - !Sub ${S3LogsBucket.Arn}
              - !Sub ${S3LogsBucket.Arn}/*
            Principal:
              AWS: '{{resolve:ssm:CSLSS3LambdaARN}}'
            Action:
              - s3:List*
              - s3:Get*

  ##########################
  # End: S3 Logs resources #
  ##########################

  ######################
  # CSLS SQS resources #
  ######################

  S3CslsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-${Environment}-s3-csls-queue
      KmsMasterKeyId: !GetAtt CslsKmsKey.Arn
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt S3CslsDeadLetterQueue.Arn
        maxReceiveCount: 5

  QueryCompletedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref S3CslsQueue
      PolicyDocument:
        Statement:
          - Sid: SQSLogshipping
            Action:
              - 'sqs:ChangeMessageVisibility'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueAttributes'
              - 'sqs:ReceiveMessage'
            Effect: 'Allow'
            Resource: !GetAtt S3CslsQueue.Arn
            Principal:
              AWS: '{{resolve:ssm:CSLSS3LambdaArn}}'

  S3CslsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-${Environment}-s3-csls-dead-letter-queue
      KmsMasterKeyId: !GetAtt CslsKmsKey.Arn
      MessageRetentionPeriod: 1209600 # 14 days

  FailureToProcessS3CslsMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm that monitors the S3Csls DLQ for any new objects
      AlarmName: !Sub ${AWS::StackName}-failure-to-process-s3-csls-message
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 60
      Threshold: 1
      TreatMissingData: notBreaching
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      AlarmActions:
        - !ImportValue txma-alarms-slack-alerts-BuildNotificationTopicArn
      OKActions:
        - !ImportValue txma-alarms-slack-alerts-BuildNotificationTopicArn
      Dimensions:
        - Name: QueueName
          Value: !GetAtt S3CslsDeadLetterQueue.QueueName

  #########################
  # Start: SSM Parameters #
  #########################

  ChatbotAlarmRoleArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ChatbotAlarmRoleArn
      Type: String
      Value: !GetAtt ChatbotAlarmRole.Arn

  CriticalAlarmSnsTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: CriticalAlarmSnsTopicArn
      Type: String
      Value: !GetAtt SNSCriticalAlarmTopic.TopicArn

  DatabaseKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: DatabaseKmsKeyArn
      Type: String
      Value: !GetAtt DatabaseKmsKey.Arn

  FirehoseKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: FirehoseKmsKeyArn
      Type: String
      Value: !GetAtt FirehoseKmsKey.Arn

  LambdaKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: LambdaKmsKeyArn
      Type: String
      Value: !GetAtt LambdaKmsKey.Arn

  LogsKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: LogsKmsKeyArn
      Type: String
      Value: !GetAtt LogsKmsKey.Arn

  S3LogsBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: S3LogsBucketName
      Type: String
      Value: !Ref S3LogsBucket

  SecretsKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: SecretsKmsKeyArn
      Type: String
      Value: !GetAtt SecretsKmsKey.Arn

  SqsKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: SqsKmsKeyArn
      Type: String
      Value: !GetAtt SqsKmsKey.Arn

  SnsKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: CoreSnsKmsKeyArn
      Type: String
      Value: !GetAtt SnsKmsKey.Arn

  #######################
  # End: SSM Parameters #
  #######################
