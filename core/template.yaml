AWSTemplateFormatVersion: '2010-09-09'
Description: Core infrastructure that should not change often
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Conditions:
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]

Resources:
  #############
  # AWS Chatbot
  #############

  ChatbotAlarmRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${Environment}-chatbot-alarm-role
      PermissionsBoundary:
        !If [
          UsePermissionsBoundary,
          !Ref PermissionsBoundary,
          !Ref AWS::NoValue
        ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'chatbot.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  ##########
  # KMS Keys
  ##########

  DatabaseKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  DatabaseKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/database-kms-key
      TargetKeyId: !Ref DatabaseKmsKey

  LambdaKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow Lambda to decrypt environment variables
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  LambdaKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/lambda-kms-key
      TargetKeyId: !Ref LambdaKmsKey

  LogsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow CloudWatch Logs to use key
            Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Decrypt*
              - kms:Describe*
              - kms:Encrypt*
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: '*'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  LogsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/logs-kms-key
      TargetKeyId: !Ref LogsKmsKey

  SecretsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
            Resource: '*'

  SecretsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/secrets-kms-key
      TargetKeyId: !Ref SecretsKmsKey

  SnsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow access for Key User (SNS Service Principal)
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'
          - Sid: Allow access for CloudWatch
            Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'

  SnsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/sns-kms-key
      TargetKeyId: !Ref SnsKmsKey

  SqsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable Root access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow AWS Lambda access
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Encrypt
              - kms:Decrypt
            Resource: '*'

  SqsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}/${Environment}/queue-kms-key
      TargetKeyId: !Ref SqsKmsKey

  #########
  # S3 Logs
  #########

  S3LogsBucket:
    #checkov:skip=CKV_AWS_18:This is the logs bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Join [
          '-',
          [
            !Ref AWS::StackName,
            !Ref Environment,
            s3-logs,
            !Select [
              4,
              !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]
            ]
          ]
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: ExpireLogsRule
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpiration:
              NoncurrentDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  ################
  # SSM Parameters
  ################

  ChatbotAlarmRoleArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ChatbotAlarmRoleArn
      Type: String
      Value: !GetAtt ChatbotAlarmRole.Arn

  DatabaseKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: DatabaseKmsKeyArn
      Type: String
      Value: !GetAtt DatabaseKmsKey.Arn

  LambdaKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: LambdaKmsKeyArn
      Type: String
      Value: !GetAtt LambdaKmsKey.Arn

  LogsKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: LogsKmsKeyArn
      Type: String
      Value: !GetAtt LogsKmsKey.Arn

  S3LogsBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: S3LogsBucketName
      Type: String
      Value: !Ref S3LogsBucket

  SecretsKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: SecretsKmsKeyArn
      Type: String
      Value: !GetAtt SecretsKmsKey.Arn

  SqsKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: SqsKmsKeyArn
      Type: String
      Value: !GetAtt SqsKmsKey.Arn

  SnsKmsKeyArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: CoreSnsKmsKeyArn
      Type: String
      Value: !GetAtt SnsKmsKey.Arn
